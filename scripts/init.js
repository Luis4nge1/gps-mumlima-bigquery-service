#!/usr/bin/env node

/**
 * Script de inicializaci√≥n del microservicio GPS-BigQuery
 */

import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = path.join(__dirname, '..');

async function createDirectories() {
  const directories = [
    'tmp',
    'tmp/backup',
    'logs',
    'data',
    'data/backup'
  ];

  console.log('üìÅ Creando directorios necesarios...');
  
  for (const dir of directories) {
    const fullPath = path.join(projectRoot, dir);
    try {
      await fs.mkdir(fullPath, { recursive: true });
      console.log(`   ‚úÖ ${dir}`);
    } catch (error) {
      console.log(`   ‚ùå Error creando ${dir}:`, error.message);
    }
  }
}

async function checkEnvironment() {
  console.log('üîç Verificando entorno...');
  
  // Verificar Node.js version
  const nodeVersion = process.version;
  const majorVersion = parseInt(nodeVersion.slice(1).split('.')[0]);
  
  if (majorVersion < 18) {
    console.log(`   ‚ùå Node.js ${nodeVersion} detectado. Se requiere >= 18.0.0`);
    process.exit(1);
  } else {
    console.log(`   ‚úÖ Node.js ${nodeVersion}`);
  }

  // Verificar archivo .env
  const envPath = path.join(projectRoot, '.env');
  const envExamplePath = path.join(projectRoot, '.env.example');
  
  try {
    await fs.access(envPath);
    console.log('   ‚úÖ Archivo .env encontrado');
  } catch {
    try {
      await fs.copyFile(envExamplePath, envPath);
      console.log('   ‚úÖ Archivo .env creado desde .env.example');
      console.log('   ‚ö†Ô∏è  Recuerda configurar las variables de entorno en .env');
    } catch (error) {
      console.log('   ‚ùå Error creando .env:', error.message);
    }
  }
}

async function testRedisConnection() {
  console.log('üîó Probando conexi√≥n Redis...');
  
  try {
    const { createRedisClient } = await import('../src/config/redis.js');
    const client = createRedisClient();
    
    await client.connect();
    const result = await client.ping();
    
    if (result === 'PONG') {
      console.log('   ‚úÖ Conexi√≥n Redis exitosa');
    } else {
      console.log('   ‚ùå Respuesta inesperada de Redis:', result);
    }
    
    await client.quit();
    
  } catch (error) {
    console.log('   ‚ùå Error conectando a Redis:', error.message);
    console.log('   üí° Aseg√∫rate de que Redis est√© ejecut√°ndose');
  }
}

async function showConfiguration() {
  console.log('‚öôÔ∏è Configuraci√≥n detectada:');
  
  try {
    const { config } = await import('../src/config/env.js');
    
    console.log(`   üìä Redis: ${config.redis.host}:${config.redis.port}/${config.redis.db}`);
    console.log(`   üìç GPS Key: ${config.gps.listKey}`);
    console.log(`   üìÅ Archivo salida: ${config.gps.outputFilePath}`);
    console.log(`   ‚è∞ Intervalo: ${config.scheduler.intervalMinutes} minutos`);
    console.log(`   üìù Log level: ${config.logging.level}`);
    console.log(`   üîÑ Scheduler: ${config.scheduler.enabled ? 'Habilitado' : 'Deshabilitado'}`);
    
  } catch (error) {
    console.log('   ‚ùå Error cargando configuraci√≥n:', error.message);
  }
}

async function main() {
  console.log('üöÄ Inicializando GPS BigQuery Microservice...\n');
  
  try {
    await createDirectories();
    console.log();
    
    await checkEnvironment();
    console.log();
    
    await testRedisConnection();
    console.log();
    
    await showConfiguration();
    console.log();
    
    console.log('‚úÖ Inicializaci√≥n completada!');
    console.log('\nüìã Pr√≥ximos pasos:');
    console.log('   1. Configurar variables en .env si es necesario');
    console.log('   2. Ejecutar: npm start');
    console.log('   3. Para ejecuci√≥n √∫nica: npm run start:once');
    console.log('   4. Para desarrollo: npm run dev');
    
  } catch (error) {
    console.error('‚ùå Error durante la inicializaci√≥n:', error.message);
    process.exit(1);
  }
}

// Ejecutar si es llamado directamente
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}