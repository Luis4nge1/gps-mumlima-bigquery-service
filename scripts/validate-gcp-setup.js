#!/usr/bin/env node

/**
 * Script para validar la configuraci√≥n de GCP
 * Uso: node scripts/validate-gcp-setup.js
 */

import { gcpConfig, getGCPStatus } from '../src/config/gcpConfig.js';
import { config } from '../src/config/env.js';

function printHeader(title) {
  console.log('\n' + '='.repeat(50));
  console.log(`  ${title}`);
  console.log('='.repeat(50));
}

function printSection(title, data) {
  console.log(`\nüìã ${title}:`);
  Object.entries(data).forEach(([key, value]) => {
    if (typeof value === 'object' && value !== null) {
      console.log(`  ${key}:`);
      Object.entries(value).forEach(([subKey, subValue]) => {
        console.log(`    ${subKey}: ${subValue}`);
      });
    } else {
      console.log(`  ${key}: ${value}`);
    }
  });
}

async function validateGCPSetup() {
  try {
    printHeader('VALIDACI√ìN DE CONFIGURACI√ìN GCP');

    // Obtener estado de configuraci√≥n
    const status = getGCPStatus();
    
    // Mostrar informaci√≥n general
    printSection('Estado General', {
      'Modo Simulaci√≥n': status.simulationMode ? '‚úÖ Activado' : '‚ùå Desactivado',
      'Credenciales V√°lidas': status.credentialsValid ? '‚úÖ S√≠' : '‚ùå No',
      'Modo de Credenciales': status.credentialsMode,
      'Mensaje': status.credentialsMessage,
      'Ruta Service Account': status.serviceAccountPath || 'No encontrado'
    });

    // Mostrar configuraci√≥n de proyecto
    printSection('Configuraci√≥n de Proyecto', {
      'Project ID': status.projectId || 'No configurado'
    });

    // Mostrar configuraci√≥n de GCS
    printSection('Google Cloud Storage', status.gcs);

    // Mostrar configuraci√≥n de BigQuery
    printSection('BigQuery', status.bigQuery);

    // Validar directorios de simulaci√≥n si est√° activado
    if (status.simulationMode) {
      console.log('\nüîß Modo Simulaci√≥n Activado');
      gcpConfig.initializeSimulationDirectories();
      
      const simulationConfig = config.gcp.simulation;
      printSection('Directorios de Simulaci√≥n', {
        'GCS Local': simulationConfig.paths.gcs,
        'BigQuery Local': simulationConfig.paths.bigQuery
      });
    }

    // Mostrar variables de entorno relevantes
    printHeader('VARIABLES DE ENTORNO DETECTADAS');
    
    const envVars = {
      'GCP_SIMULATION_MODE': process.env.GCP_SIMULATION_MODE || 'false',
      'GOOGLE_APPLICATION_CREDENTIALS': process.env.GOOGLE_APPLICATION_CREDENTIALS || 'No configurado',
      'GCP_PROJECT_ID': process.env.GCP_PROJECT_ID || 'No configurado',
      'GCS_BUCKET_NAME': process.env.GCS_BUCKET_NAME || 'Valor por defecto',
      'GCS_REGION': process.env.GCS_REGION || 'Valor por defecto',
      'BIGQUERY_DATASET_ID': process.env.BIGQUERY_DATASET_ID || 'Valor por defecto',
      'BIGQUERY_LOCATION': process.env.BIGQUERY_LOCATION || 'Valor por defecto'
    };

    Object.entries(envVars).forEach(([key, value]) => {
      const status = value === 'No configurado' ? '‚ùå' : '‚úÖ';
      console.log(`  ${status} ${key}: ${value}`);
    });

    // Validaci√≥n final
    printHeader('RESULTADO DE VALIDACI√ìN');
    
    if (status.credentialsValid || status.simulationMode) {
      console.log('‚úÖ Configuraci√≥n GCP v√°lida y lista para usar');
      
      if (status.simulationMode) {
        console.log('üîß Ejecut√°ndose en modo simulaci√≥n - no se conectar√° a GCP real');
      } else {
        console.log('üåê Configurado para conectar a GCP en producci√≥n');
      }
      
      process.exit(0);
    } else {
      console.log('‚ùå Configuraci√≥n GCP inv√°lida');
      console.log('\nüí° Para solucionar:');
      console.log('   1. Coloca tu service-account.json en la ra√≠z del proyecto');
      console.log('   2. O configura GOOGLE_APPLICATION_CREDENTIALS');
      console.log('   3. O activa el modo simulaci√≥n con GCP_SIMULATION_MODE=true');
      
      process.exit(1);
    }

  } catch (error) {
    console.error('\n‚ùå Error durante la validaci√≥n:', error.message);
    process.exit(1);
  }
}

// Ejecutar validaci√≥n si se llama directamente
if (import.meta.url === `file://${process.argv[1]}`) {
  validateGCPSetup();
}

export { validateGCPSetup };