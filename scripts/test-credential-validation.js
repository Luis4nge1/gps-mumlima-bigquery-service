#!/usr/bin/env node

/**
 * Script para probar la validaci√≥n de credenciales GCP
 * Uso: node scripts/test-credential-validation.js
 */

import { gcpConfig, getGCPStatus } from '../src/config/gcpConfig.js';
import { GCPInitializer } from '../src/utils/GCPInitializer.js';

async function testCredentialValidation() {
  console.log('üß™ Probando validaci√≥n de credenciales GCP...\n');

  // Test 1: Validaci√≥n b√°sica de credenciales
  console.log('üìã Test 1: Validaci√≥n b√°sica de credenciales');
  const validation = gcpConfig.validateCredentials();
  console.log(`   Resultado: ${validation.valid ? '‚úÖ' : '‚ùå'} ${validation.message}`);
  console.log(`   Modo: ${validation.mode}`);
  
  // Test 2: Estado completo de configuraci√≥n
  console.log('\nüìã Test 2: Estado completo de configuraci√≥n');
  const status = getGCPStatus();
  console.log(`   Modo simulaci√≥n: ${status.simulationMode ? '‚úÖ' : '‚ùå'}`);
  console.log(`   Credenciales v√°lidas: ${status.credentialsValid ? '‚úÖ' : '‚ùå'}`);
  console.log(`   Proyecto: ${status.projectId || 'No configurado'}`);
  console.log(`   Bucket GCS: ${status.gcs.bucketName}`);
  console.log(`   Dataset BigQuery: ${status.bigQuery.datasetId}`);

  // Test 3: Inicializaci√≥n completa
  console.log('\nüìã Test 3: Inicializaci√≥n completa');
  const initializer = new GCPInitializer();
  const initResult = await initializer.initialize();
  console.log(`   Inicializaci√≥n: ${initResult.success ? '‚úÖ' : '‚ùå'} ${initResult.message}`);
  
  // Test 4: Fallback graceful
  console.log('\nüìã Test 4: Fallback graceful');
  const fallbackResult = await initializer.gracefulFallback();
  console.log(`   Fallback necesario: ${fallbackResult.fallback ? '‚úÖ' : '‚ùå'}`);
  console.log(`   Modo fallback: ${fallbackResult.mode || 'N/A'}`);
  console.log(`   Mensaje: ${fallbackResult.message}`);

  // Test 5: Health status
  console.log('\nüìã Test 5: Health status');
  const healthStatus = initializer.getHealthStatus();
  console.log(`   GCP configurado: ${healthStatus.gcp.configured ? '‚úÖ' : '‚ùå'}`);
  console.log(`   Modo: ${healthStatus.gcp.mode}`);
  console.log(`   Credenciales: ${healthStatus.gcp.credentials}`);

  console.log('\nüéâ Pruebas de validaci√≥n completadas');
}

// Ejecutar pruebas si se llama directamente
testCredentialValidation().catch(error => {
  console.error('‚ùå Error en las pruebas:', error.message);
  process.exit(1);
});

export { testCredentialValidation };