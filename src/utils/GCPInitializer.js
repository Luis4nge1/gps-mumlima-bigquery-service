import { gcpConfig } from '../config/gcpConfig.js';

/**
 * Utilidad para inicializar configuraci√≥n GCP
 */
export class GCPInitializer {
  constructor() {
    this.config = gcpConfig;
  }

  /**
   * Inicializa la configuraci√≥n GCP completa
   */
  async initialize() {
    console.log('üöÄ Inicializando configuraci√≥n GCP...');
    
    try {
      // Validar configuraci√≥n
      const validation = this.config.validateAndThrow();
      
      // Inicializar directorios de simulaci√≥n si es necesario
      if (this.config.isSimulationMode()) {
        this.config.initializeSimulationDirectories();
        console.log('üìÅ Directorios de simulaci√≥n inicializados');
      }

      // Mostrar resumen de configuraci√≥n
      this.logConfigurationSummary(validation);
      
      return {
        success: true,
        mode: validation.mode,
        message: 'Configuraci√≥n GCP inicializada correctamente'
      };

    } catch (error) {
      console.error('‚ùå Error al inicializar configuraci√≥n GCP:', error.message);
      
      // Proporcionar sugerencias de soluci√≥n
      this.logTroubleshootingTips(error);
      
      return {
        success: false,
        error: error.message,
        message: 'Error en inicializaci√≥n GCP'
      };
    }
  }

  /**
   * Muestra resumen de configuraci√≥n
   */
  logConfigurationSummary(validation) {
    const status = this.config.getStatus();
    
    console.log('\nüìã Resumen de Configuraci√≥n GCP:');
    console.log(`   Modo: ${validation.mode}`);
    console.log(`   Proyecto: ${status.projectId}`);
    console.log(`   Bucket GCS: ${status.gcs.bucketName}`);
    console.log(`   Dataset BigQuery: ${status.bigQuery.datasetId}`);
    
    if (status.simulationMode) {
      console.log('   üîß Ejecut√°ndose en modo simulaci√≥n');
    } else {
      console.log(`   üåê Conectado a GCP (${validation.clientEmail})`);
    }
  }

  /**
   * Muestra consejos de soluci√≥n de problemas
   */
  logTroubleshootingTips(error) {
    console.log('\nüí° Consejos para solucionar el problema:');
    
    if (error.message.includes('service-account.json')) {
      console.log('   1. Coloca tu archivo service-account.json en la ra√≠z del proyecto');
      console.log('   2. O configura GOOGLE_APPLICATION_CREDENTIALS con la ruta correcta');
      console.log('   3. O activa el modo simulaci√≥n: GCP_SIMULATION_MODE=true');
    }
    
    if (error.message.includes('Variables de entorno')) {
      console.log('   1. Configura las variables de entorno requeridas en .env');
      console.log('   2. Copia .env.example a .env y completa los valores');
      console.log('   3. Ejecuta: npm run validate-gcp para verificar');
    }
    
    if (error.message.includes('inv√°lido')) {
      console.log('   1. Verifica que el service-account.json sea v√°lido');
      console.log('   2. Descarga un nuevo archivo desde Google Cloud Console');
      console.log('   3. Aseg√∫rate de que tenga los permisos necesarios');
    }
    
    console.log('\nüîç Para m√°s detalles ejecuta: npm run validate-gcp');
  }

  /**
   * Verifica si la configuraci√≥n est√° lista para usar
   */
  isReady() {
    try {
      this.config.validateAndThrow();
      return true;
    } catch {
      return false;
    }
  }

  /**
   * Obtiene informaci√≥n de estado para health checks
   */
  getHealthStatus() {
    const status = this.config.getStatus();
    
    return {
      gcp: {
        configured: status.credentialsValid || status.simulationMode,
        mode: status.simulationMode ? 'simulation' : 'production',
        project: status.projectId,
        credentials: status.credentialsValid ? 'valid' : 'invalid',
        services: {
          gcs: {
            bucket: status.gcs.bucketName,
            region: status.gcs.region
          },
          bigquery: {
            dataset: status.bigQuery.datasetId,
            location: status.bigQuery.location
          }
        }
      }
    };
  }

  /**
   * Fallback graceful cuando faltan credenciales
   */
  async gracefulFallback() {
    if (this.isReady()) {
      return { fallback: false, message: 'Configuraci√≥n GCP lista' };
    }

    console.warn('‚ö†Ô∏è  Configuraci√≥n GCP no disponible, usando fallback');
    
    // Activar modo simulaci√≥n autom√°ticamente
    process.env.GCP_SIMULATION_MODE = 'true';
    
    try {
      // Reinicializar configuraci√≥n en modo simulaci√≥n
      const gcpModule = await import('../config/gcpConfig.js');
      const newConfig = new gcpModule.GCPConfig();
      newConfig.initializeSimulationDirectories();
      
      console.log('üîß Modo simulaci√≥n activado autom√°ticamente');
      
      return {
        fallback: true,
        mode: 'simulation',
        message: 'Fallback a modo simulaci√≥n activado'
      };
      
    } catch (error) {
      console.error('‚ùå Error en fallback graceful:', error.message);
      
      return {
        fallback: true,
        mode: 'disabled',
        message: 'GCP deshabilitado - funcionalidad limitada'
      };
    }
  }
}

/**
 * Instancia singleton del inicializador
 */
export const gcpInitializer = new GCPInitializer();

/**
 * Funci√≥n de conveniencia para inicializar GCP
 */
export async function initializeGCP() {
  return await gcpInitializer.initialize();
}

/**
 * Funci√≥n de conveniencia para verificar estado
 */
export function getGCPHealthStatus() {
  return gcpInitializer.getHealthStatus();
}